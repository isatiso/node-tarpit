name: node-tarpit-main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version:
          - 16.x

    services:
      rabbitmq:
        image: rabbitmq:3.9
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: admin_password
        ports:
          - 5672/tcp
        options: --health-cmd "rabbitmqctl node_health_check" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Configure CI Git User
        run: |
          git config --global user.name isatiso
          git config --global user.email sieglive@gmail.com
          git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/isatiso/node-tarpit.git

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - env:
          RABBITMQ_URL: amqp://admin:admin_password@localhost:${{ job.services.rabbitmq.ports[5672] }}
        run: |
          pnpm install
          pnpm build
          lerna run build
          lerna run test --verbose

      - name: Upload coverage barbeque
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: barbeque
          fail_ci_if_error: true
          files: ./packages/barbeque/coverage/coverage-final.json

      - name: Upload coverage config
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: config
          fail_ci_if_error: true
          files: ./packages/config/coverage/coverage-final.json

      - name: Upload coverage dora
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: dora
          fail_ci_if_error: true
          files: ./packages/dora/coverage/coverage-final.json

      - name: Upload coverage error
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: error
          fail_ci_if_error: true
          files: ./packages/error/coverage/coverage-final.json

      - name: Upload coverage judge
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: judge
          fail_ci_if_error: true
          files: ./packages/judge/coverage/coverage-final.json

      - name: Upload coverage content-type
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: content-type
          fail_ci_if_error: true
          files: ./modules/content-type/coverage/coverage-final.json

      - name: Upload coverage core
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: core
          fail_ci_if_error: true
          files: ./modules/core/coverage/coverage-final.json

      - name: Upload coverage http
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: http
          fail_ci_if_error: true
          files: ./modules/http/coverage/coverage-final.json

      - name: Upload coverage schedule
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: schedule
          fail_ci_if_error: true
          files: ./modules/schedule/coverage/coverage-final.json

      - name: Upload coverage schedule
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: rabbitmq
          fail_ci_if_error: true
          files: ./modules/rabbitmq/coverage/coverage-final.json

#      - name: Authenticate with Registry
#        run: |
#          pnpm logout 2>&1 | true
#          echo "@tarpit:registry=https://registry.npmjs.org/" > .npmrc
#          echo "registry=https://registry.npmjs.org/" >> .npmrc
#          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
#          npm whoami
#        env:
#          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish package
        run: "lerna publish patch --yes"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - run: "lerna run docs"

      - run: |
          git add ./docs/apis
          git commit -am "generate docs"
          git push
